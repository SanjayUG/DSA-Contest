/*
Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.
Two nodes of a binary tree are cousins if they have the same depth with different parents.
Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

41.06min
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public boolean isCousins(TreeNode root, int x, int y) {
        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);

        while(!q.isEmpty()) {
            int n = q.size();
            boolean foundX = false, foundY = false;
            TreeNode parX = null, parY = null;

            for(int i=0; i<n; i++) {
                TreeNode curr = q.poll();

                if(curr.left != null) {
                    if(curr.left.val == x) {
                        foundX = true; parX = curr;
                    } 
                    if(curr.left.val == y) {
                        foundY = true; parY = curr;
                    }

                    q.offer(curr.left);
                }
                if(curr.right != null) {

                    if(curr.right.val == x) {
                        foundX = true; parX = curr;
                    }
                    if(curr.right.val == y) {
                        foundY = true; parY = curr;
                    }

                    q.offer(curr.right);
                }
            }

            if(foundX && foundY) {
                return parX != parY;
            }

            if(foundX || foundY) {
                return false;
            }
        }

        return false;
    }
}
