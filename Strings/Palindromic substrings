/*
Problem statement
You have been given a string STR. Your task is to find the total number of palindromic substrings of STR.

Example :
If the input string is "abbc", then all the possible palindromic substrings would be: ["a", "b", "b", c", "bb"] and hence, the output will be 5 since we have 5 substrings in total which form a palindrome.

Note :
A string is said to be a 'Palindrome' if it is read the same forwards and backwards. 
For example, “abba” is a palindrome, but “abbc” is not.
A 'Substring' is a contiguous sequence of characters within a string. 
For example, "a", "b", "c", "ab", "bc", "abc" are substrings of "abc".

23.32min
*/


public class Solution {
    public static int palindromicSubstrings(String str) {
        int n = str.length();
        int count = 0;

        // Expand Around Center
        int totalCenters = 2*n - 1;
        for (int center = 0; center < totalCenters; center++) {
            int left = center / 2;
            int right = left + center % 2;

            while (left >= 0 && right < n && str.charAt(left) == str.charAt(right)) {
                count++;
                left--;
                right++;
            }
        }

        return count;
    }
}



// ------------------------

// public class Solution {
//     public static int palindromicSubstrings(String str) {
//         int n = str.length();
//         int count = 0;

//         for(int i=0; i<n; i++) {
//             count += countPallFromCenter(str, i, i);
//             count += countPallFromCenter(str, i, i+1);
//         }

//         return count;
//     }

//     public static int countPallFromCenter(String str, int left, int right) {
//         int count = 0;
//         while(left>=0 && right<str.length() && str.charAt(left) == str.charAt(right)) {
//             count++;
//             left--;
//             right++;
//         }

//         return count;
//     }
// }
