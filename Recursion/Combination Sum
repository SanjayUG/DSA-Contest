/*
Problem statement
You are given an array 'ARR' of 'N' distinct positive integers. You are also given a non-negative integer 'B'.

Your task is to return all unique combinations in the array whose sum equals 'B'. A number can be chosen any number of times from the array 'ARR'.

Elements in each combination must be in non-decreasing order.

For example:
Let the array 'ARR' be [1, 2, 3] and 'B' = 5. Then all possible valid combinations are-
(1, 1, 1, 1, 1)
(1, 1, 1, 2)
(1, 1, 3)
(1, 2, 2)
(2, 3)

29.43min
*/


import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
public class Solution {
    public static List< List < Integer > > combSum(int []ARR, int B) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(ARR);

        backTrack(result, ARR, B, 0, new ArrayList<>());

        return result;
    }

    public static void backTrack(List<List<Integer>> res, int[] arr, int target, int index, List<Integer> curr) {

        if(target == 0) {
            res.add(new ArrayList<>(curr));
            return;
        }

        for(int i=index; i<arr.length; i++) {
            if(arr[i] > target) {
                break;
            }

            curr.add(arr[i]);
            backTrack(res, arr, target-arr[i], i, curr);
            curr.remove(curr.size()-1);
        }
    }

    
}
